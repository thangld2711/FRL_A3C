#!/usr/bin/env python3

import json
import os
import sys
PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PATH)
from utils import PPrint
import config


def generate_exploits_tree():
    client = config.getClient()
    exploits = client.modules.exploits
    exploits_tree = []

    for exploit_name in exploits:

        # if "fileformat/" in exploit_name \
        #         or "browser/" in exploit_name \
        #         or "local/" in exploit_name:
        #     continue

        exploit = client.modules.use('exploit', exploit_name)
        exploit_options = exploit.options
        if exploit.rank not in ["excellent", "great", "good"]:
            continue
        if len(exploit.targetpayloads()) == 0:
            continue
        if "RPORT" not in exploit_options:
            continue
        if "RHOSTS" in exploit_options:
            exploit["RHOSTS"] = "127.0.0.1"
        if "RHOST" in exploit_options:
            exploit["RHOST"] = "127.0.0.1"
        if len(exploit.missing_required) != 0:
            continue
        PPrint().info("Adding {}".format(exploit_name))

        exploits_tree.append({"exploit": exploit_name,
                              "default_port": exploit["RPORT"],
                              "description": exploit.description,
                              "fullname": exploit.fullname,
                              "name": exploit.name,
                              "rank": exploit.rank,
                              "references": exploit.references,
                              "platform": exploit.platform
                              })

    f = open(config.EXPLOITS_TREE_PATH, "w")
    f.write(json.dumps(exploits_tree, indent=4))
    f.close()
    return(exploits_tree)


def run():
    PPrint().info("Generating exploits tree.")
    generate_exploits_tree()
    PPrint().success("Completed generating exploits tree.")


if __name__ == "__main__":
    PPrint().initial_message()
    PPrint().info("Calling Exploits Tree generation directly.")
    run()
    PPrint().finishing_message()
